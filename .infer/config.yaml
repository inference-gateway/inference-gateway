gateway:
  url: http://localhost:8080
  api_key: ''
  timeout: 200
client:
  timeout: 200
  retry:
    enabled: true
    max_attempts: 3
    initial_backoff_sec: 5
    max_backoff_sec: 60
    backoff_multiplier: 2
    retryable_status_codes:
      - 400
      - 408
      - 429
      - 500
      - 502
      - 503
      - 504
logging:
  debug: false
  dir: ''
tools:
  enabled: true
  sandbox:
    directories:
      - .
      - /tmp
    protected_paths:
      - .infer/
      - .git/
      - '*.env'
  bash:
    enabled: true
    whitelist:
      commands:
        - ls
        - pwd
        - echo
        - wc
        - sort
        - uniq
        - task
      patterns:
        - ^git branch( --show-current)?$
        - ^git checkout -b [a-zA-Z0-9/_-]+( [a-zA-Z0-9/_-]+)?$
        - ^git checkout [a-zA-Z0-9/_-]+
        - ^git add [a-zA-Z0-9/_.-]+
        - ^git diff+
        - ^git remote -v$
        - ^git status$
        - ^git log --oneline -n [0-9]+$
        - ^git commit -m ".+"$
        - ^git push( --set-upstream)?( origin)? (feature|fix|bugfix|hotfix|chore|docs|test|refactor|build|ci|perf|style)/[a-zA-Z0-9/_.-]+$
        - ^git push( --set-upstream)?( origin)? develop$
        - ^git push( --set-upstream)?( origin)? staging$
        - ^git push( --set-upstream)?( origin)? release/[a-zA-Z0-9._-]+$
  read:
    enabled: true
    require_approval: false
  write:
    enabled: true
    require_approval: true
  edit:
    enabled: true
    require_approval: true
  delete:
    enabled: true
    require_approval: true
  grep:
    enabled: true
    backend: auto
    require_approval: false
  tree:
    enabled: true
    require_approval: false
  web_fetch:
    enabled: true
    whitelisted_domains:
      - golang.org
    safety:
      max_size: 8192
      timeout: 30
      allow_redirect: true
    cache:
      enabled: true
      ttl: 3600
      max_size: 52428800
  web_search:
    enabled: true
    default_engine: duckduckgo
    max_results: 10
    engines:
      - duckduckgo
      - google
    timeout: 10
  github:
    enabled: true
    token: '%GITHUB_TOKEN%'
    base_url: https://api.github.com
    owner: 'inference-gateway'
    safety:
      max_size: 1048576
      timeout: 30
  todo_write:
    enabled: true
    require_approval: false
  safety:
    require_approval: true
compact:
  output_dir: .infer
  summary_model: 'deepseek/deepseek-chat'
agent:
  model: 'deepseek/deepseek-chat'
  system_prompt: |
    Autonomous software engineering agent. Execute tasks iteratively until completion.

    IMPORTANT: You NEVER push to main or master or to the current branch - instead you create a branch and push to a branch.
    IMPORTANT: You ALWAYS prefer to search for specific matches in a file rather than reading it all - prefer to use Grep tool over Read tool for efficiency.
    IMPORTANT: You ALWAYS prefer to see AGENTS.md before README.md files.
    IMPORTANT: When reading project documentation, prefer AGENTS.md if available, otherwise fallback to README.md - start by Using Grep tool and read all the headings followed by '^##' - found the section you were looking for? great - use Read tool. You didn't find anything? continue to see '^###'

    RULES:
    - Security: Defensive only (analysis, detection, docs)
    - Style: no emojis/comments unless asked, use conventional commits
    - Code: Follow existing patterns, check deps, no secrets
    - Tasks: Use TodoWrite, mark progress immediately
    - Chat exports: Read only "## Summary" to "---" section
    - Tools: ALWAYS use parallel execution when possible - batch multiple tool calls in a single response to improve efficiency
    - Tools: Prefer Grep for search, Read for specific files

    PARALLEL TOOL EXECUTION:
    - When you need to perform multiple operations, make ALL tool calls in a single response
    - Examples: Read multiple files, search multiple patterns, execute multiple commands
    - The system supports up to 5 concurrent tool executions by default
    - This reduces back-and-forth communication and significantly improves performance

    WORKFLOW:
    When asked to implement features or fix issues:
    1. Plan with TodoWrite
    2. Search codebase to understand context
    3. Implement solution
    4. Run tests with: task test
    5. Run lint/format with: task fmt and task lint
    6. Commit changes (only if explicitly asked)
    7. Create a pull request (only if explicitly asked)

    EXAMPLE:
    <user>Can you create a pull request with the changes?</user>
    <assistant>I will checkout to a new branch</assistant>
    <tool>Bash(git checkout -b feat/my-new-feature)</tool>
    <assistant>Now I will modify the files</assistant>
    <tool>Read|Edit|Grep etc</tool>
    <tool>Bash(git add <files>)</tool>
    <tool>Bash(git commit -m <message>)</tool>
    <assistant>Now I will push the changes</assistant>
    <tool>Bash(git push origin <branch>)</tool>
    <assistant>Now I'll create a pull request</assistant>
    <tool>Github(...)</tool>
  system_reminders:
    enabled: true
    interval: 4
    reminder_text: |-
      <system-reminder>
      This is a reminder that your todo list is currently empty. DO NOT mention this to the user explicitly because they are already aware. If you are working on tasks that would benefit from a todo list please use the TodoWrite tool to create one. If not, please feel free to ignore. Again do not mention this message to the user.
      </system-reminder>
  verbose_tools: false
  max_turns: 50
  max_tokens: 4096
  max_concurrent_tools: 5
  optimization:
    enabled: false
    model: ''
    min_messages: 10
    buffer_size: 2
git:
  commit_message:
    model: ''
    system_prompt: |-
      Generate a concise git commit message following conventional commit format.

      REQUIREMENTS:
      - MUST use format: "type: Brief description"
      - MUST be under 50 characters total
      - MUST use imperative mood (e.g., "Add", "Fix", "Update")
      - Types: feat, fix, docs, style, refactor, test, chore

      EXAMPLES:
      - "feat: Add git shortcut with AI commits"
      - "fix: Resolve build error in container"
      - "docs: Update README installation guide"
      - "refactor: Simplify error handling"

      Respond with ONLY the commit message, no quotes or explanation.
storage:
  enabled: true
  type: sqlite
  sqlite:
    path: .infer/conversations.db
  postgres:
    host: localhost
    port: 5432
    database: infer_conversations
    username: ''
    password: ''
    ssl_mode: prefer
  redis:
    host: localhost
    port: 6379
    password: ''
    db: 0
conversation:
  title_generation:
    enabled: true
    model: ''
    system_prompt: |-
      Generate a concise conversation title based on the messages provided.

      REQUIREMENTS:
      - MUST be under 50 characters total
      - MUST be descriptive and capture the main topic
      - MUST use title case
      - NO quotes, colons, or special characters
      - Focus on the primary subject or task discussed

      EXAMPLES:
      - "React Component Testing"
      - "Database Migration Setup"
      - "API Error Handling"
      - "Docker Configuration"

      Respond with ONLY the title, no quotes or explanation.
    batch_size: 10
    interval: 0
chat:
  theme: tokyo-night
a2a:
  enabled: false
  agents: []
  cache:
    enabled: true
    ttl: 300
  task:
    status_poll_seconds: 5
  tools:
    query_agent:
      enabled: true
      require_approval: false
    query_task:
      enabled: true
      require_approval: false
    submit_task:
      enabled: true
      require_approval: false
