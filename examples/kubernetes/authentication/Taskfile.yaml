---
version: "3"

tasks:
  deploy-infrastructure:
    desc: "Deploy authentication infrastructure"
    cmds:
      - ctlptl apply -f Cluster.yaml
      - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      - helm repo add jetstack https://charts.jetstack.io
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - echo "🚀 Starting authentication infrastructure deployment..."
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace kube-system \
          --set controller.progressDeadlineSeconds=500 \
          --version 4.12.2 \
          --wait \
          ingress-nginx ingress-nginx/ingress-nginx
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace cert-manager \
          --version 1.17.2 \
          --set crds.enabled=true \
          --wait \
          cert-manager jetstack/cert-manager
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace idp \
          --version 16.6.2 \
          --set global.postgresql.auth.username=dbusername \
          --set global.postgresql.auth.password=dbpassword \
          --set global.postgresql.auth.database=keycloak \
          --set primary.resources.requests.cpu=100m \
          --set primary.resources.requests.memory=256Mi \
          --set primary.resources.limits.cpu=500m \
          --set primary.resources.limits.memory=512Mi \
          --set readReplicas.resources.requests.cpu=100m \
          --set readReplicas.resources.requests.memory=256Mi \
          --set readReplicas.resources.limits.cpu=500m \
          --set readReplicas.resources.limits.memory=512Mi \
          --wait \
          keycloak-db bitnami/postgresql
      - kubectl -n idp apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/26.2.4/kubernetes/keycloaks.k8s.keycloak.org-v1.yml
      - kubectl -n idp apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/26.2.4/kubernetes/keycloakrealmimports.k8s.keycloak.org-v1.yml
      - kubectl -n idp apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/26.2.4/kubernetes/kubernetes.yml
      - kubectl apply -f cert-manager/
      - kubectl apply --server-side -f keycloak/
      - |
        # HACK: because the keycloak is deployed on the same cluster and not somewhere else, 
        # we'll rewrite and resolve to the ingress instead of letting it connect via the internal dns,
        # Reason is - 
        # keycloak supports only 1 issuer(iss), in production you most likely deploy keycloak somewhere 
        # else and the endpoint will be publicly available, so there should be no issues, the hack is only for
        # this local setup - to make the keycloak.inference-gateway.local available also from within the cluster
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: coredns-custom
          namespace: kube-system
        data:
          keycloak.inference-gateway.server: |
            keycloak.inference-gateway.local {
                log
                rewrite name keycloak.inference-gateway.local host.k3d.internal
                forward . 127.0.0.1
            }
        EOF
        kubectl -n kube-system rollout restart deployment coredns
        kubectl -n kube-system rollout status deployment coredns
      - echo "🔐 Authentication infrastructure deployed successfully!"

  deploy-inference-gateway:
    desc: "Deploy inference-gateway with authentication"
    cmds:
      - kubectl create ns inference-gateway -o yaml --dry-run=client | kubectl apply --server-side -f -
      - |
        kubectl create configmap keycloak-ca \
          -n inference-gateway \
          --from-literal=ca.crt="$(kubectl get secret keycloak-tls -n idp -o jsonpath='{.data.ca\.crt}' | base64 -d)" \
          --dry-run=client -o yaml | kubectl apply --server-side -f -
      - |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          annotations:
            meta.helm.sh/release-name: inference-gateway
            meta.helm.sh/release-namespace: inference-gateway
          labels:
            app.kubernetes.io/managed-by: Helm
          name: inference-gateway
          namespace: inference-gateway
        data:
          ENABLE_AUTH: "true"
          OIDC_ISSUER_URL: https://keycloak.inference-gateway.local/realms/inference-gateway-realm
        EOF
      - |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          annotations:
            meta.helm.sh/release-name: inference-gateway
            meta.helm.sh/release-namespace: inference-gateway
          labels:
            app.kubernetes.io/managed-by: Helm
          name: inference-gateway
          namespace: inference-gateway
        stringData:
          OIDC_CLIENT_ID: inference-gateway-client
          OIDC_CLIENT_SECRET: very-secret
        type: Opaque
        EOF
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace inference-gateway \
          --set ingress.enabled=true \
          --set ingress.tls.enabled=true \
          --set envFrom.configMapRef=inference-gateway \
          --set envFrom.secretRef=inference-gateway \
          --set extraEnv[0].name=SSL_CERT_FILE \
          --set extraEnv[0].value=/usr/local/share/ca-certificates/keycloak-ca.crt \
          --set volumes[0].name=keycloak-ca \
          --set volumes[0].configMap.name=keycloak-ca \
          --set volumeMounts[0].name=keycloak-ca \
          --set volumeMounts[0].mountPath=/usr/local/share/ca-certificates/keycloak-ca.crt \
          --set volumeMounts[0].subPath=ca.crt \
          --set volumeMounts[0].readOnly=true \
          --wait \
          --version 0.7.1 \
          inference-gateway oci://ghcr.io/inference-gateway/charts/inference-gateway
      - echo "🔒 Inference Gateway with authentication enabled, deployed successfully!"

  keycloak-admin-password:
    desc: "Get Keycloak admin password"
    cmds:
      - kubectl -n idp get secret keycloak-initial-admin -o jsonpath="{.data.password}" | base64 --decode
      - echo "🔑 Retrieved Keycloak admin password!"

  fetch-access-token:
    desc: "Fetch the access token"
    cmds:
      - |
        curl -k -s -X POST \
          -H "Content-Type: application/x-www-form-urlencoded" \
          "https://keycloak.inference-gateway.local/realms/inference-gateway-realm/protocol/openid-connect/token" \
          -d "grant_type=password" \
          -d "client_id=inference-gateway-client" \
          -d "client_secret=very-secret" \
          -d "username=user" \
          -d "password=password" | jq -r .access_token
      - echo "🔑 Access token fetched successfully!"

  clean:
    desc: "Clean up the cluster"
    cmds:
      - ctlptl delete -f Cluster.yaml
      - echo "🧹 Cluster cleaned up successfully!"
