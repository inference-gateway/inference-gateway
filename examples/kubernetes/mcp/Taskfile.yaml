version: "3"

vars:
  NAMESPACE: inference-gateway
  RELEASE_NAME: inference-gateway
  CHART_VERSION: 0.7.0-rc.2
  CHART: oci://ghcr.io/inference-gateway/charts/inference-gateway

tasks:
  default:
    desc: "Show available options for MCP Kubernetes deployment"
    silent: true
    cmds:
      - echo "üöÄ MCP Kubernetes Deployment"
      - echo ""
      - echo "üéØ Common tasks:"
      - echo "   task quick-start           - Deploy everything and run tests"
      - echo "   task validate-requirements - Check if all tools are installed"
      - echo "   task deploy                - Deploy MCP setup step by step"
      - echo "   task test                  - Run comprehensive tests"
      - echo "   task clean                 - Clean up everything"
      - echo ""
      - echo "üìã Run 'task --list' to see all available tasks"
      - echo "üìñ Check README.md for detailed usage examples"

  check-cluster:
    desc: "Check cluster and Helm status"
    cmds:
      - echo "üîç Checking cluster status..."
      - kubectl cluster-info || echo "‚ùå No cluster connection"
      - echo ""
      - echo "üìä Current Helm releases:"
      - helm list -A || echo "‚ùå Helm not accessible"
      - echo ""
      - echo "üèóÔ∏è  Current pods in kube-system:"
      - kubectl get pods -n kube-system || echo "‚ùå Cannot access kube-system"
      - echo ""
      - echo "üèóÔ∏è  Current pods in {{.NAMESPACE}}:"
      - kubectl get pods -n {{.NAMESPACE}} || echo "‚ùå Namespace {{.NAMESPACE}} not found"

  validate-requirements:
    desc: "Validate that all required tools are installed"
    silent: true
    cmds:
      - |
        echo "üîç Validating requirements..."

        # Check required tools
        command -v ctlptl >/dev/null 2>&1 || { echo "‚ùå ctlptl is required but not installed. Install from: https://github.com/tilt-dev/ctlptl"; exit 1; }
        command -v kubectl >/dev/null 2>&1 || { echo "‚ùå kubectl is required but not installed."; exit 1; }
        command -v helm >/dev/null 2>&1 || { echo "‚ùå helm is required but not installed."; exit 1; }
        command -v curl >/dev/null 2>&1 || { echo "‚ùå curl is required but not installed."; exit 1; }
        command -v jq >/dev/null 2>&1 || { echo "‚ùå jq is required but not installed."; exit 1; }

        echo "‚úÖ All required tools are installed!"

        # Check if cluster exists
        if ctlptl get cluster mcp-k3d-cluster >/dev/null 2>&1; then
          echo "‚ÑπÔ∏è  Cluster 'mcp-k3d-cluster' already exists"
        else
          echo "‚ÑπÔ∏è  Cluster 'mcp-k3d-cluster' not found - will be created during deployment"
        fi

  quick-start:
    desc: "Quick start: deploy everything and run tests"
    cmds:
      - task: deploy
      - echo "üöÄ Quick start deployment completed!"
      - echo ""
      - task: setup-hosts
      - echo ""
      - echo "‚è≥ Waiting for all services to be ready..."
      - task: wait
      - echo ""
      - echo "üß™ Running tests to verify deployment..."
      - task: test
      - echo ""
      - echo "üéâ Quick start completed successfully!"
      - echo ""
      - echo "üîç Next steps:"
      - echo "   1. Run 'task port-forward' to access MCP Inspector locally"
      - echo "   2. Run 'task test:interactive' to test external access"
      - echo "   3. Use the MCP tools list endpoint to see available tools"
      - echo "   4. Check the README.md for usage examples"

  deploy-infrastructure:
    desc: "Deploy infrastructure components (k3d cluster, NGINX ingress)"
    deps:
      - validate-requirements
    cmds:
      - |
        # Check if infrastructure is already deployed
        if kubectl get nodes >/dev/null 2>&1 && helm list -n kube-system | grep -q ingress-nginx; then
          echo "‚ÑπÔ∏è  Infrastructure already deployed, skipping..."
          exit 0
        fi
      - ctlptl apply -f Cluster.yaml
      - echo "‚è≥ Waiting for cluster to be ready..."
      - kubectl wait --for=condition=Ready nodes --all --timeout=300s
      - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      - helm repo update
      - echo "üîç Installing ingress-nginx..."
      - |
        # Clean install of ingress-nginx
        helm upgrade --install \
          --create-namespace \
          --namespace kube-system \
          --set controller.progressDeadlineSeconds=500 \
          --version 4.12.2 \
          --wait \
          --timeout=10m \
          ingress-nginx ingress-nginx/ingress-nginx
      - echo "üöÄ Infrastructure deployed successfully!"

  setup-secrets:
    desc: "Set up the necessary secrets for the Inference Gateway"
    cmds:
      - kubectl create namespace {{.NAMESPACE}} --dry-run=client -o yaml | kubectl apply --server-side -f -
      - |
        # Read API keys for providers
        echo "Setting up API keys for inference providers..."
        echo "You can press Enter to skip any provider you don't want to configure."
        echo ""

        read -p "Enter your Groq API key (recommended for testing): " GROQ_API_KEY
        read -p "Enter your OpenAI API key (optional): " OPENAI_API_KEY
        read -p "Enter your Anthropic API key (optional): " ANTHROPIC_API_KEY

        # Delete existing secret if it exists (to avoid conflicts)
        kubectl delete secret {{.RELEASE_NAME}} -n {{.NAMESPACE}} --ignore-not-found=true

        # Create the secret with Helm metadata
        kubectl apply -f - <<EOK
        apiVersion: v1
        kind: Secret
        metadata:
          name: {{.RELEASE_NAME}}
          namespace: {{.NAMESPACE}}
          labels:
            app.kubernetes.io/managed-by: Helm
          annotations:
            meta.helm.sh/release-name: {{.RELEASE_NAME}}
            meta.helm.sh/release-namespace: {{.NAMESPACE}}
        type: Opaque
        stringData:
          GROQ_API_KEY: "${GROQ_API_KEY}"
          OPENAI_API_KEY: "${OPENAI_API_KEY}"
          ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
        EOK
        echo "‚úÖ Secrets configured successfully!"

  deploy-mcp-servers:
    desc: "Deploy MCP servers (time, search, filesystem)"
    cmds:
      - kubectl create namespace {{.NAMESPACE}} --dry-run=client -o yaml | kubectl apply --server-side -f -
      - kubectl apply -f mcp-servers/ -n {{.NAMESPACE}}
      - echo "üîß MCP servers deployed successfully!"

  deploy-inference-gateway:
    desc: "Deploy Inference Gateway with MCP configuration using Helm"
    cmds:
      - task: setup-secrets
      - task: deploy-mcp-servers
      - |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: {{.RELEASE_NAME}}
          namespace: {{.NAMESPACE}}
          labels:
            app.kubernetes.io/managed-by: Helm
          annotations:
            meta.helm.sh/release-name: {{.RELEASE_NAME}}
            meta.helm.sh/release-namespace: {{.NAMESPACE}}
        data:
          ENVIRONMENT: "development"
          MCP_ENABLE: "true"
          MCP_EXPOSE: "true"
          MCP_SERVERS: "http://mcp-time-server:8081/mcp,http://mcp-search-server:8082/mcp,http://mcp-filesystem-server:8083/mcp"
          MCP_CLIENT_TIMEOUT: "5s"
          MCP_DIAL_TIMEOUT: "3s"
          MCP_TLS_HANDSHAKE_TIMEOUT: "3s"
          MCP_RESPONSE_HEADER_TIMEOUT: "3s"
          MCP_EXPECT_CONTINUE_TIMEOUT: "1s"
          MCP_REQUEST_TIMEOUT: "5s"
        EOF
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace {{.NAMESPACE}} \
          --set envFrom.configMapRef={{.RELEASE_NAME}} \
          --set envFrom.secretRef={{.RELEASE_NAME}} \
          --set ingress.enabled=true \
          --set ingress.className=nginx \
          --set ingress.annotations."nginx\.ingress\.kubernetes\.io/rewrite-target"=/ \
          --set "ingress.hosts[0].host=api.inference-gateway.local" \
          --set "ingress.hosts[0].paths[0].path=/" \
          --set "ingress.hosts[0].paths[0].pathType=Prefix" \
          --version {{.CHART_VERSION}} \
          --wait \
          {{.RELEASE_NAME}} {{.CHART}}
      - echo "üö™ Inference Gateway with MCP deployed successfully!"

  deploy:
    desc: "Deploy complete MCP setup"
    cmds:
      - task: deploy-infrastructure
      - task: deploy-mcp-servers
      - task: wait
      - task: deploy-inference-gateway
      - echo "üéâ Complete MCP setup deployed successfully!"
      - echo ""
      - echo "üåê Access URLs (add to /etc/hosts 127.0.0.1 api.inference-gateway.local):"
      - echo "   Inference Gateway http://api.inference-gateway.local"
      - echo "   MCP Inspector http://localhost:6274 (after port-forward)"
      - echo ""
      - echo "üîç Next steps:"
      - echo "   1. Run 'task setup-hosts' for local access setup"
      - echo "   2. Run 'task port-forward' to access services locally"
      - echo "   3. Run 'task test' to verify the deployment"
      - echo "   4. Check the README.md for usage examples"

  setup-hosts:
    desc: "Help setup /etc/hosts for local access"
    cmds:
      - |
        echo "üåê Setting up local access..."
        echo ""
        echo "To access the Inference Gateway locally, you need to add this entry to your /etc/hosts file:"
        echo ""
        echo "127.0.0.1 api.inference-gateway.local"
        echo ""
        echo "You can add it by running:"
        echo "sudo echo '127.0.0.1 api.inference-gateway.local' >> /etc/hosts"
        echo ""
        echo "Or edit /etc/hosts manually with your preferred editor."
        echo ""
        echo "After adding the entry, you can access:"
        echo "  üåê Inference Gateway: http://api.inference-gateway.local"
        echo "  üîç MCP Inspector: http://localhost:6274 (after running 'task port-forward')"

  port-forward:
    desc: "Forward ports for local access"
    cmds:
      - |
        echo "Starting port forwarding..."
        echo "Inference Gateway: http://api.inference-gateway.local (via ingress)"
        echo "MCP Inspector: http://localhost:6274"
        echo "Press Ctrl+C to stop"
        kubectl port-forward -n {{.NAMESPACE}} service/mcp-inspector 6274:6274

  test:
    desc: "Run comprehensive MCP integration tests"
    deps:
      - test:health
      - test:mcp-tools
    cmds:
      - echo "üéâ All MCP integration tests passed successfully!"
      - echo ""
      - echo "üìä Test Summary:"
      - echo "   ‚úÖ Gateway Health Check"
      - echo "   ‚úÖ MCP Tools Discovery"
      - echo ""
      - echo "üöÄ MCP integration is working correctly in Kubernetes!"

  test:health:
    desc: "Test Gateway and MCP servers health"
    cmds:
      - echo "üîç Testing Inference Gateway health..."
      - |
        kubectl delete pod test-pod --ignore-not-found=true -n {{.NAMESPACE}}
      - |
        kubectl run test-pod --rm -i --restart=Never --image=curlimages/curl -n {{.NAMESPACE}} -- \
          curl -f http://{{.RELEASE_NAME}}:8080/health
      - echo "‚úÖ Gateway is healthy"
      - echo ""
      - echo "üîç Testing MCP servers health..."
      - |
        kubectl run test-pod --rm -i --restart=Never --image=curlimages/curl -n {{.NAMESPACE}} -- \
          curl -f http://mcp-time-server:8081/health
      - |
        kubectl run test-pod --rm -i --restart=Never --image=curlimages/curl -n {{.NAMESPACE}} -- \
          curl -f http://mcp-search-server:8082/health
      - |
        kubectl run test-pod --rm -i --restart=Never --image=curlimages/curl -n {{.NAMESPACE}} -- \
          curl -f http://mcp-filesystem-server:8083/health
      - echo "‚úÖ All MCP servers are healthy"

  test:mcp-tools:
    desc: "Test MCP tools discovery endpoint"
    cmds:
      - echo "üîç Testing MCP tools discovery..."
      - |
        TOOLS_RESPONSE=$(kubectl run test-pod --rm -i --restart=Never --image=curlimages/curl -n {{.NAMESPACE}} -- \
          curl -s http://{{.RELEASE_NAME}}:8080/v1/mcp/tools)
        echo "$TOOLS_RESPONSE"
      - echo "‚úÖ MCP tools endpoint working correctly"

  test:interactive:
    desc: "Run interactive MCP test with external access"
    cmds:
      - echo "üß™ Running interactive MCP test..."
      - echo "This test requires external access to api.inference-gateway.local"
      - echo "Make sure you have added '127.0.0.1 api.inference-gateway.local' to /etc/hosts"
      - echo ""
      - task: test:interactive:health
      - task: test:interactive:tools

  test:interactive:health:
    desc: "Test health endpoint externally"
    cmds:
      - echo "1Ô∏è‚É£ Testing Gateway Health..."
      - curl -s -f "http://api.inference-gateway.local/health" | jq . || (echo "‚ùå Gateway health check failed"; exit 1)
      - echo "‚úÖ Gateway is healthy"

  test:interactive:tools:
    desc: "Test MCP tools endpoint externally"
    cmds:
      - echo "2Ô∏è‚É£ Testing MCP Tools Endpoint..."
      - |
        TOOLS_RESPONSE=$(curl -s -f "http://api.inference-gateway.local/v1/mcp/tools")
        echo "$TOOLS_RESPONSE" | jq . > /dev/null || (echo "‚ùå MCP tools endpoint failed"; exit 1)
        TOOL_COUNT=$(echo "$TOOLS_RESPONSE" | jq '.tools | length')
        echo "‚úÖ Found $TOOL_COUNT MCP tools available"
        echo ""
        echo "üîç Available MCP Tools:"
        echo "$TOOLS_RESPONSE" | jq '.tools[] | "   ‚Ä¢ \(.name): \(.description)"' -r

  logs:
    desc: "Show logs from all pods"
    cmds:
      - kubectl logs -l app.kubernetes.io/part-of=inference-gateway-mcp -n {{.NAMESPACE}} --tail=100 -f

  logs:gateway:
    desc: "Show logs from inference gateway only"
    cmds:
      - kubectl logs -l app.kubernetes.io/name={{.RELEASE_NAME}} -n {{.NAMESPACE}} --tail=100 -f

  logs:mcp-servers:
    desc: "Show logs from MCP servers only"
    cmds:
      - kubectl logs -l app.kubernetes.io/name=mcp-time-server -n {{.NAMESPACE}} --tail=50
      - kubectl logs -l app.kubernetes.io/name=mcp-search-server -n {{.NAMESPACE}} --tail=50
      - kubectl logs -l app.kubernetes.io/name=mcp-filesystem-server -n {{.NAMESPACE}} --tail=50

  status:
    desc: "Show status of all resources"
    cmds:
      - kubectl get all -n {{.NAMESPACE}}

  status:detailed:
    desc: "Show detailed status including events and descriptions"
    cmds:
      - kubectl get all -n {{.NAMESPACE}} -o wide
      - echo ""
      - echo "üìä Recent Events:"
      - kubectl get events -n {{.NAMESPACE}} --sort-by='.lastTimestamp' | tail -10
      - echo ""
      - echo "üîç Pod Details:"
      - kubectl describe pods -n {{.NAMESPACE}}

  wait:
    desc: "Wait for all pods to be ready"
    cmds:
      - echo "‚è≥ Waiting for all pods to be ready..."
      - kubectl wait --for=condition=ready pod --all -n {{.NAMESPACE}} --timeout=300s
      - echo "‚úÖ All pods are ready!"

  restart:
    desc: "Restart all deployments"
    cmds:
      - kubectl rollout restart deployment --selector=app.kubernetes.io/component=mcp-server -n {{.NAMESPACE}}
      - echo "üîÑ All deployments restarted!"
      - task: wait
      - kubectl rollout restart deployment/{{.RELEASE_NAME}} -n {{.NAMESPACE}}

  undeploy:
    desc: "Remove all MCP components"
    cmds:
      - helm uninstall {{.RELEASE_NAME}} -n {{.NAMESPACE}} --ignore-not-found
      - kubectl delete -f mcp-servers/ -n {{.NAMESPACE}} --ignore-not-found=true
      - kubectl delete namespace {{.NAMESPACE}} --ignore-not-found=true

  clean:
    desc: "Clean up everything including cluster"
    cmds:
      - task: undeploy
      - |
        # Clean up any stuck helm releases
        helm uninstall ingress-nginx -n kube-system --ignore-not-found || true
      - ctlptl delete -f Cluster.yaml
      - echo "üßπ Everything cleaned up successfully!"

  clean-helm:
    desc: "Clean up stuck Helm releases"
    cmds:
      - echo "üßπ Cleaning up stuck Helm releases..."
      - |
        # List all releases to see current state
        echo "Current Helm releases:"
        helm list -A || true
        echo ""

        # Clean up stuck ingress-nginx
        echo "Cleaning up ingress-nginx..."
        helm uninstall ingress-nginx -n kube-system --ignore-not-found || true

        # Clean up inference-gateway
        echo "Cleaning up {{.RELEASE_NAME}}..."
        helm uninstall {{.RELEASE_NAME}} -n {{.NAMESPACE}} --ignore-not-found || true

        echo "‚úÖ Helm cleanup completed!"
