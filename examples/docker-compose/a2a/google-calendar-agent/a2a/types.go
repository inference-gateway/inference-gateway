package a2a

import "time"

// JSONRPCRequest represents a JSON-RPC 2.0 request
type JSONRPCRequest struct {
	Jsonrpc string                 `json:"jsonrpc"`
	Method  string                 `json:"method"`
	Params  map[string]interface{} `json:"params"`
	ID      interface{}            `json:"id"`
}

// JSONRPCSuccessResponse represents a successful JSON-RPC 2.0 response
type JSONRPCSuccessResponse struct {
	Jsonrpc string      `json:"jsonrpc"`
	Result  interface{} `json:"result"`
	ID      interface{} `json:"id"`
}

// JSONRPCErrorResponse represents an error JSON-RPC 2.0 response
type JSONRPCErrorResponse struct {
	Jsonrpc string       `json:"jsonrpc"`
	Error   JSONRPCError `json:"error"`
	ID      interface{}  `json:"id"`
}

// JSONRPCError represents a JSON-RPC 2.0 error
type JSONRPCError struct {
	Code    int         `json:"code"`
	Message string      `json:"message"`
	Data    interface{} `json:"data,omitempty"`
}

// AgentCard represents the agent metadata
type AgentCard struct {
	Name               string            `json:"name"`
	Description        string            `json:"description"`
	URL                string            `json:"url"`
	Version            string            `json:"version"`
	Capabilities       AgentCapabilities `json:"capabilities"`
	Defaultinputmodes  []string          `json:"defaultInputModes"`
	Defaultoutputmodes []string          `json:"defaultOutputModes"`
	Skills             []AgentSkill      `json:"skills"`
}

// AgentCapabilities defines what the agent can do
type AgentCapabilities struct {
	Streaming              bool `json:"streaming"`
	Pushnotifications      bool `json:"pushNotifications"`
	Statetransitionhistory bool `json:"stateTransitionHistory"`
}

// AgentSkill represents a capability the agent can perform
type AgentSkill struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Inputmodes  []string `json:"inputModes"`
	Outputmodes []string `json:"outputModes"`
	Examples    []string `json:"examples,omitempty"`
}

// Message represents a message in the conversation
type Message struct {
	Role      string `json:"role"`
	MessageId string `json:"messageId"`
	ContextId string `json:"contextId"`
	TaskId    string `json:"taskId"`
	Parts     []Part `json:"parts"`
}

// Part represents a part of a message
type Part struct {
	Type string                 `json:"type"`
	Text string                 `json:"text,omitempty"`
	Data map[string]interface{} `json:"data,omitempty"`
}

// TaskStatus represents the status of a task
type TaskStatus struct {
	State     string    `json:"state"`
	Timestamp time.Time `json:"timestamp"`
	Message   *Message  `json:"message,omitempty"`
}

// Task represents a task
type Task struct {
	Id        string     `json:"id"`
	ContextId string     `json:"contextId"`
	Status    TaskStatus `json:"status"`
	Artifacts []Artifact `json:"artifacts"`
	History   []Message  `json:"history"`
	Kind      string     `json:"kind"`
}

// Artifact represents an artifact generated by the task
type Artifact struct {
	ArtifactId string `json:"artifactId"`
	Name       string `json:"name"`
	Parts      []Part `json:"parts"`
}
