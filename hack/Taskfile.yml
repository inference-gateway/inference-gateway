---
version: "3"

tasks:
  test-helm:
    desc: "Run helm tests"
    cmds:
      - helm dependency update ../charts/inference-gateway
      - helm lint ../charts/inference-gateway
      - |
        helm template --debug --dry-run \
          ../charts/inference-gateway \
          --values ../charts/inference-gateway/values.yaml \
          --set autoscaling.enabled=true

  test-deploy-infrastructure:
    desc: "Deploy the infrastructure"
    cmds:
      - ctlptl apply -f Cluster.yaml
      - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - helm repo add grafana https://grafana.github.io/helm-charts
      - helm repo add codecentric https://codecentric.github.io/helm-charts
      - helm repo add jetstack https://charts.jetstack.io
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace kube-system \
          --version 4.12.1 \
          ingress-nginx ingress-nginx/ingress-nginx
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace cert-manager \
          --version 1.17.1 \
          --set crds.enabled=true \
          cert-manager jetstack/cert-manager
      - |
        kubectl apply -f - <<EOF
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: selfsigned-issuer
        spec:
          selfSigned: {}
        EOF
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace observability \
          --version 70.4.2 \
          --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \
          --set-string prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchLabels.monitoring=true \
          --set prometheus.enabled=false \
          --set alertmanager.enabled=false \
          --set kubeStateMetrics.enabled=false \
          --set nodeExporter.enabled=false \
          --set grafana.enabled=false \
          kube-prometheus-stack prometheus-community/kube-prometheus-stack
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace observability \
          --version 5.17.0 \
          grafana-operator grafana/grafana-operator
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace idp \
          --version 16.6.2 \
          --set global.postgresql.auth.username=dbusername \
          --set global.postgresql.auth.password=dbpassword \
          --set global.postgresql.auth.database=keycloak \
          keycloak-db bitnami/postgresql \
          --wait
      - kubectl -n idp apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/26.1.4/kubernetes/keycloaks.k8s.keycloak.org-v1.yml
      - kubectl -n idp apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/26.1.4/kubernetes/keycloakrealmimports.k8s.keycloak.org-v1.yml
      - kubectl -n idp apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/26.1.4/kubernetes/kubernetes.yml
      - |
        kubectl apply -f - <<EOF
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: keycloak-cert
          namespace: idp
        spec:
          secretName: keycloak-tls
          issuerRef:
            name: selfsigned-issuer
            kind: ClusterIssuer
          commonName: keycloak.inference-gateway.local
          dnsNames:
            - keycloak.inference-gateway.local
            - keycloak-service.idp.svc.cluster.local
          subject:
            organizations:
            - Inference Gateway
            organizationalUnits:
            - IT
            countries:
            - US
            localities:
            - San Francisco
            provinces:
            - California
        EOF
      - |
        kubectl -n idp apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: keycloak-db-postgresql
          labels:
            app.kubernetes.io/name: keycloak
            app.kubernetes.io/instance: keycloak
            app.kubernetes.io/version: "26.1.4"
            app.kubernetes.io/component: identity-provider
            app.kubernetes.io/part-of: inference-gateway
        type: Opaque
        stringData:
          username: dbusername
          password: dbpassword
        EOF
      - |
        kubectl -n idp apply -f - <<EOF
        apiVersion: k8s.keycloak.org/v2alpha1
        kind: Keycloak
        metadata:
          name: keycloak
          labels:
            app.kubernetes.io/name: keycloak
            app.kubernetes.io/instance: keycloak
            app.kubernetes.io/version: "26.1.4"
            app.kubernetes.io/component: identity-provider
            app.kubernetes.io/part-of: inference-gateway
        spec:
          instances: 2
          startOptimized: false
          ingress:
            enabled: false
          db:
            vendor: postgres
            host: keycloak-db-postgresql
            usernameSecret:
              name: keycloak-db-postgresql
              key: username
            passwordSecret:
              name: keycloak-db-postgresql
              key: password
            database: keycloak
          http:
            httpEnabled: true
            httpPort: 8180
            httpsPort: 8543
            tlsSecret: keycloak-tls
          httpManagement:
            port: 9000
          hostname:
            hostname: keycloak-service.idp.svc.cluster.local
            strict: true
          # features:
          #   disabled:
          #     - admin
          #     - step-up-authentication
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "2000m"
              memory: "2Gi"
          scheduling:
            affinity:
              podAntiAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - key: app.kubernetes.io/name
                        operator: In
                        values:
                        - keycloak
                    topologyKey: kubernetes.io/hostname
        EOF
      - |
        kubectl -n idp apply -f - <<EOF
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: keycloak
          namespace: idp
          labels:
            app.kubernetes.io/name: keycloak
            app.kubernetes.io/instance: keycloak
            app.kubernetes.io/version: "26.1.4"
            app.kubernetes.io/component: identity-provider
            app.kubernetes.io/part-of: inference-gateway
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        spec:
          ingressClassName: nginx
          tls:
          - hosts:
            - keycloak.inference-gateway.local
            secretName: keycloak-tls
          rules:
            - host: keycloak.inference-gateway.local
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: keycloak-service
                        port:
                          number: 8543
        EOF
      - task: import-realm

  test-helm-deploy:
    desc: "deploy the helm chart to a local cluster"
    cmds:
      - helm dependency update ../charts/inference-gateway
      - kubectl create ns inference-gateway -o yaml --dry-run=client | kubectl apply --server-side -f -
      - | # Trust the self-signed certificate
        kubectl create configmap keycloak-ca \
          -n inference-gateway \
          --from-literal=ca.crt="$(kubectl get secret keycloak-tls -n idp -o jsonpath='{.data.ca\.crt}' | base64 -d)" \
          --dry-run=client -o yaml | kubectl apply --server-side -f -
      - |
        helm upgrade --install \
          --create-namespace \
          --namespace inference-gateway \
          --values ../charts/inference-gateway/values.yaml \
          --set autoscaling.enabled=true \
          --set ingress.enabled=true \
          --set envFrom.configMapRef=inference-gateway \
          --set envFrom.secretRef=inference-gateway \
          --set volumes[0].name=keycloak-ca \
          --set volumes[0].configMap.name=keycloak-ca \
          --set volumeMounts[0].name=keycloak-ca \
          --set volumeMounts[0].mountPath=/usr/local/share/ca-certificates/keycloak-ca.crt \
          --set volumeMounts[0].subPath=ca.crt \
          --set volumeMounts[0].readOnly=true \
          inference-gateway oci://ghcr.io/inference-gateway/charts/inference-gateway:0.5.0-rc.19
      - |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: inference-gateway-client-secret
          namespace: inference-gateway
        type: Opaque
        stringData:
          OIDC_CLIENT_ID: inference-gateway-client
          OIDC_CLIENT_SECRET: very-secret
        EOF
      - |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: inference-gateway
          namespace: inference-gateway
        data:
          ENVIRONMENT: "development"
          ENABLE_AUTH: "true"
          OIDC_ISSUER_URL: https://keycloak-service.idp.svc.cluster.local:8543/realms/inference-gateway-realm
          SSL_CERT_FILE: /usr/local/share/ca-certificates/keycloak-ca.crt
        EOF
      - |
        kubectl -n inference-gateway rollout restart deployment inference-gateway
        kubectl -n inference-gateway rollout status deployment inference-gateway

  clean-services:
    desc: "Clean up the services"
    cmds:
      - helm uninstall inference-gateway

  clean:
    desc: "Clean the gateway"
    cmds:
      - ctlptl delete -f Cluster.yaml

  import-realm:
    desc: "Import Keycloak realm using CRD"
    cmds:
      - |
        kubectl -n idp apply -f - <<EOF
        apiVersion: k8s.keycloak.org/v2alpha1
        kind: KeycloakRealmImport
        metadata:
          name: inference-gateway-realm
          namespace: idp
          labels:
            app.kubernetes.io/name: keycloak
            app.kubernetes.io/instance: keycloak
            app.kubernetes.io/version: "26.1.4"
            app.kubernetes.io/component: identity-provider
            app.kubernetes.io/part-of: inference-gateway
        spec:
          keycloakCRName: keycloak
          realm:
            {
              "realm": "inference-gateway-realm",
              "enabled": true,
              "registrationAllowed": false,
              "displayName": "Example Keycloak Sign-In",
              "displayNameHtml": "<h1 style=\"font-size: 40pt; font-weight: 400;\">Keycloak Sign-In</h1>",
              "clients": [
                {
                  "clientId": "inference-gateway-client",
                  "enabled": true,
                  "protocol": "openid-connect",
                  "standardFlowEnabled": true,
                  "implicitFlowEnabled": false,
                  "directAccessGrantsEnabled": true,
                  "serviceAccountsEnabled": false,
                  "publicClient": false,
                  "redirectUris": ["http://www.inference-gateway.local:3000/*"],
                  "webOrigins": ["http://www.inference-gateway.local:3000"],
                  "clientAuthenticatorType": "client-secret",
                  "secret": "very-secret",
                  "protocolMappers": [
                    {
                      "name": "audience-mapper",
                      "protocol": "openid-connect",
                      "protocolMapper": "oidc-audience-mapper",
                      "config": {
                        "included.client.audience": "inference-gateway-client",
                        "id.token.claim": "true",
                        "access.token.claim": "true",
                        "add.to.id.token": "true",
                        "add.to.access.token": "true"
                      }
                    }
                  ]
                }
              ],
              "users": [
                {
                  "username": "user",
                  "firstName": "Example",
                  "lastName": "User",
                  "email": "example@keycloak.org",
                  "enabled": true,
                  "credentials": [
                    {
                      "type": "password",
                      "value": "password",
                      "temporary": false
                    }
                  ],
                  "clientRoles": {
                    "account": ["manage-account"]
                  },
                  "realmRoles": []
                }
              ]
            }
        EOF
