// Code generated by MockGen. DO NOT EDIT.
// Source: agent.go
//
// Generated by this command:
//
//	mockgen -source=agent.go -destination=../tests/mocks/a2a/agent.go -package=a2amocks
//

// Package a2amocks is a generated GoMock package.
package a2amocks

import (
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	providers "github.com/inference-gateway/inference-gateway/providers"
	gomock "go.uber.org/mock/gomock"
)

// MockAgent is a mock of Agent interface.
type MockAgent struct {
	ctrl     *gomock.Controller
	recorder *MockAgentMockRecorder
	isgomock struct{}
}

// MockAgentMockRecorder is the mock recorder for MockAgent.
type MockAgentMockRecorder struct {
	mock *MockAgent
}

// NewMockAgent creates a new mock instance.
func NewMockAgent(ctrl *gomock.Controller) *MockAgent {
	mock := &MockAgent{ctrl: ctrl}
	mock.recorder = &MockAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent) EXPECT() *MockAgentMockRecorder {
	return m.recorder
}

// ExecuteTools mocks base method.
func (m *MockAgent) ExecuteTools(ctx context.Context, toolCalls []providers.ChatCompletionMessageToolCall) ([]providers.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTools", ctx, toolCalls)
	ret0, _ := ret[0].([]providers.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTools indicates an expected call of ExecuteTools.
func (mr *MockAgentMockRecorder) ExecuteTools(ctx, toolCalls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTools", reflect.TypeOf((*MockAgent)(nil).ExecuteTools), ctx, toolCalls)
}

// Run mocks base method.
func (m *MockAgent) Run(ctx context.Context, request *providers.CreateChatCompletionRequest, response *providers.CreateChatCompletionResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, request, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockAgentMockRecorder) Run(ctx, request, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAgent)(nil).Run), ctx, request, response)
}

// RunWithStream mocks base method.
func (m *MockAgent) RunWithStream(ctx context.Context, middlewareStreamCh chan []byte, c *gin.Context, body *providers.CreateChatCompletionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithStream", ctx, middlewareStreamCh, c, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithStream indicates an expected call of RunWithStream.
func (mr *MockAgentMockRecorder) RunWithStream(ctx, middlewareStreamCh, c, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithStream", reflect.TypeOf((*MockAgent)(nil).RunWithStream), ctx, middlewareStreamCh, c, body)
}

// SetModel mocks base method.
func (m *MockAgent) SetModel(model *string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetModel", model)
}

// SetModel indicates an expected call of SetModel.
func (mr *MockAgentMockRecorder) SetModel(model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModel", reflect.TypeOf((*MockAgent)(nil).SetModel), model)
}

// SetProvider mocks base method.
func (m *MockAgent) SetProvider(provider providers.IProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProvider", provider)
}

// SetProvider indicates an expected call of SetProvider.
func (mr *MockAgentMockRecorder) SetProvider(provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProvider", reflect.TypeOf((*MockAgent)(nil).SetProvider), provider)
}
