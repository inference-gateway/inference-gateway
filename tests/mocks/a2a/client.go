// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=../tests/mocks/a2a/client.go -package=a2amocks
//

// Package a2amocks is a generated GoMock package.
package a2amocks

import (
	context "context"
	reflect "reflect"

	a2a "github.com/inference-gateway/inference-gateway/a2a"
	gomock "go.uber.org/mock/gomock"
)

// MockA2AClientInterface is a mock of A2AClientInterface interface.
type MockA2AClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockA2AClientInterfaceMockRecorder
	isgomock struct{}
}

// MockA2AClientInterfaceMockRecorder is the mock recorder for MockA2AClientInterface.
type MockA2AClientInterfaceMockRecorder struct {
	mock *MockA2AClientInterface
}

// NewMockA2AClientInterface creates a new mock instance.
func NewMockA2AClientInterface(ctrl *gomock.Controller) *MockA2AClientInterface {
	mock := &MockA2AClientInterface{ctrl: ctrl}
	mock.recorder = &MockA2AClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockA2AClientInterface) EXPECT() *MockA2AClientInterfaceMockRecorder {
	return m.recorder
}

// CancelTask mocks base method.
func (m *MockA2AClientInterface) CancelTask(ctx context.Context, request *a2a.CancelTaskRequest, agentURL string) (*a2a.CancelTaskSuccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTask", ctx, request, agentURL)
	ret0, _ := ret[0].(*a2a.CancelTaskSuccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTask indicates an expected call of CancelTask.
func (mr *MockA2AClientInterfaceMockRecorder) CancelTask(ctx, request, agentURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockA2AClientInterface)(nil).CancelTask), ctx, request, agentURL)
}

// GetAgentCapabilities mocks base method.
func (m *MockA2AClientInterface) GetAgentCapabilities() map[string]a2a.AgentCapabilities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentCapabilities")
	ret0, _ := ret[0].(map[string]a2a.AgentCapabilities)
	return ret0
}

// GetAgentCapabilities indicates an expected call of GetAgentCapabilities.
func (mr *MockA2AClientInterfaceMockRecorder) GetAgentCapabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentCapabilities", reflect.TypeOf((*MockA2AClientInterface)(nil).GetAgentCapabilities))
}

// GetAgentCard mocks base method.
func (m *MockA2AClientInterface) GetAgentCard(ctx context.Context, agentURL string) (*a2a.AgentCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentCard", ctx, agentURL)
	ret0, _ := ret[0].(*a2a.AgentCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentCard indicates an expected call of GetAgentCard.
func (mr *MockA2AClientInterfaceMockRecorder) GetAgentCard(ctx, agentURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentCard", reflect.TypeOf((*MockA2AClientInterface)(nil).GetAgentCard), ctx, agentURL)
}

// GetAgentSkills mocks base method.
func (m *MockA2AClientInterface) GetAgentSkills(agentURL string) ([]a2a.AgentSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentSkills", agentURL)
	ret0, _ := ret[0].([]a2a.AgentSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentSkills indicates an expected call of GetAgentSkills.
func (mr *MockA2AClientInterfaceMockRecorder) GetAgentSkills(agentURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentSkills", reflect.TypeOf((*MockA2AClientInterface)(nil).GetAgentSkills), agentURL)
}

// GetAgents mocks base method.
func (m *MockA2AClientInterface) GetAgents() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgents")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAgents indicates an expected call of GetAgents.
func (mr *MockA2AClientInterfaceMockRecorder) GetAgents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgents", reflect.TypeOf((*MockA2AClientInterface)(nil).GetAgents))
}

// GetTask mocks base method.
func (m *MockA2AClientInterface) GetTask(ctx context.Context, request *a2a.GetTaskRequest, agentURL string) (*a2a.GetTaskSuccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, request, agentURL)
	ret0, _ := ret[0].(*a2a.GetTaskSuccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockA2AClientInterfaceMockRecorder) GetTask(ctx, request, agentURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockA2AClientInterface)(nil).GetTask), ctx, request, agentURL)
}

// InitializeAll mocks base method.
func (m *MockA2AClientInterface) InitializeAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeAll indicates an expected call of InitializeAll.
func (mr *MockA2AClientInterfaceMockRecorder) InitializeAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeAll", reflect.TypeOf((*MockA2AClientInterface)(nil).InitializeAll), ctx)
}

// IsInitialized mocks base method.
func (m *MockA2AClientInterface) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized.
func (mr *MockA2AClientInterfaceMockRecorder) IsInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockA2AClientInterface)(nil).IsInitialized))
}

// RefreshAgentCard mocks base method.
func (m *MockA2AClientInterface) RefreshAgentCard(ctx context.Context, agentURL string) (*a2a.AgentCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAgentCard", ctx, agentURL)
	ret0, _ := ret[0].(*a2a.AgentCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshAgentCard indicates an expected call of RefreshAgentCard.
func (mr *MockA2AClientInterfaceMockRecorder) RefreshAgentCard(ctx, agentURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAgentCard", reflect.TypeOf((*MockA2AClientInterface)(nil).RefreshAgentCard), ctx, agentURL)
}

// SendMessage mocks base method.
func (m *MockA2AClientInterface) SendMessage(ctx context.Context, request *a2a.SendMessageRequest, agentURL string) (*a2a.SendMessageSuccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, request, agentURL)
	ret0, _ := ret[0].(*a2a.SendMessageSuccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockA2AClientInterfaceMockRecorder) SendMessage(ctx, request, agentURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockA2AClientInterface)(nil).SendMessage), ctx, request, agentURL)
}

// SendStreamingMessage mocks base method.
func (m *MockA2AClientInterface) SendStreamingMessage(ctx context.Context, request *a2a.SendStreamingMessageRequest, agentURL string) (<-chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendStreamingMessage", ctx, request, agentURL)
	ret0, _ := ret[0].(<-chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendStreamingMessage indicates an expected call of SendStreamingMessage.
func (mr *MockA2AClientInterfaceMockRecorder) SendStreamingMessage(ctx, request, agentURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendStreamingMessage", reflect.TypeOf((*MockA2AClientInterface)(nil).SendStreamingMessage), ctx, request, agentURL)
}
