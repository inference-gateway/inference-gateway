// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=../tests/mocks/mcp_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mcp "github.com/inference-gateway/inference-gateway/mcp"
	providers "github.com/inference-gateway/inference-gateway/providers"
	gomock "go.uber.org/mock/gomock"
)

// MockMCPClientInterface is a mock of MCPClientInterface interface.
type MockMCPClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMCPClientInterfaceMockRecorder
	isgomock struct{}
}

// MockMCPClientInterfaceMockRecorder is the mock recorder for MockMCPClientInterface.
type MockMCPClientInterfaceMockRecorder struct {
	mock *MockMCPClientInterface
}

// NewMockMCPClientInterface creates a new mock instance.
func NewMockMCPClientInterface(ctrl *gomock.Controller) *MockMCPClientInterface {
	mock := &MockMCPClientInterface{ctrl: ctrl}
	mock.recorder = &MockMCPClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMCPClientInterface) EXPECT() *MockMCPClientInterfaceMockRecorder {
	return m.recorder
}

// BuildSSEFallbackURL mocks base method.
func (m *MockMCPClientInterface) BuildSSEFallbackURL(serverURL string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSSEFallbackURL", serverURL)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildSSEFallbackURL indicates an expected call of BuildSSEFallbackURL.
func (mr *MockMCPClientInterfaceMockRecorder) BuildSSEFallbackURL(serverURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSSEFallbackURL", reflect.TypeOf((*MockMCPClientInterface)(nil).BuildSSEFallbackURL), serverURL)
}

// ConvertMCPToolsToChatCompletionTools mocks base method.
func (m *MockMCPClientInterface) ConvertMCPToolsToChatCompletionTools(arg0 []mcp.Tool) []providers.ChatCompletionTool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertMCPToolsToChatCompletionTools", arg0)
	ret0, _ := ret[0].([]providers.ChatCompletionTool)
	return ret0
}

// ConvertMCPToolsToChatCompletionTools indicates an expected call of ConvertMCPToolsToChatCompletionTools.
func (mr *MockMCPClientInterfaceMockRecorder) ConvertMCPToolsToChatCompletionTools(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertMCPToolsToChatCompletionTools", reflect.TypeOf((*MockMCPClientInterface)(nil).ConvertMCPToolsToChatCompletionTools), arg0)
}

// ExecuteTool mocks base method.
func (m *MockMCPClientInterface) ExecuteTool(ctx context.Context, request mcp.Request, serverURL string) (*mcp.CallToolResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTool", ctx, request, serverURL)
	ret0, _ := ret[0].(*mcp.CallToolResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTool indicates an expected call of ExecuteTool.
func (mr *MockMCPClientInterfaceMockRecorder) ExecuteTool(ctx, request, serverURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTool", reflect.TypeOf((*MockMCPClientInterface)(nil).ExecuteTool), ctx, request, serverURL)
}

// GetAllChatCompletionTools mocks base method.
func (m *MockMCPClientInterface) GetAllChatCompletionTools() []providers.ChatCompletionTool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChatCompletionTools")
	ret0, _ := ret[0].([]providers.ChatCompletionTool)
	return ret0
}

// GetAllChatCompletionTools indicates an expected call of GetAllChatCompletionTools.
func (mr *MockMCPClientInterfaceMockRecorder) GetAllChatCompletionTools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChatCompletionTools", reflect.TypeOf((*MockMCPClientInterface)(nil).GetAllChatCompletionTools))
}

// GetServerCapabilities mocks base method.
func (m *MockMCPClientInterface) GetServerCapabilities() map[string]mcp.ServerCapabilities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerCapabilities")
	ret0, _ := ret[0].(map[string]mcp.ServerCapabilities)
	return ret0
}

// GetServerCapabilities indicates an expected call of GetServerCapabilities.
func (mr *MockMCPClientInterfaceMockRecorder) GetServerCapabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerCapabilities", reflect.TypeOf((*MockMCPClientInterface)(nil).GetServerCapabilities))
}

// GetServerTools mocks base method.
func (m *MockMCPClientInterface) GetServerTools(serverURL string) ([]mcp.Tool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerTools", serverURL)
	ret0, _ := ret[0].([]mcp.Tool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerTools indicates an expected call of GetServerTools.
func (mr *MockMCPClientInterfaceMockRecorder) GetServerTools(serverURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerTools", reflect.TypeOf((*MockMCPClientInterface)(nil).GetServerTools), serverURL)
}

// GetServers mocks base method.
func (m *MockMCPClientInterface) GetServers() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetServers indicates an expected call of GetServers.
func (mr *MockMCPClientInterfaceMockRecorder) GetServers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServers", reflect.TypeOf((*MockMCPClientInterface)(nil).GetServers))
}

// InitializeAll mocks base method.
func (m *MockMCPClientInterface) InitializeAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeAll indicates an expected call of InitializeAll.
func (mr *MockMCPClientInterfaceMockRecorder) InitializeAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeAll", reflect.TypeOf((*MockMCPClientInterface)(nil).InitializeAll), ctx)
}

// IsInitialized mocks base method.
func (m *MockMCPClientInterface) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized.
func (mr *MockMCPClientInterfaceMockRecorder) IsInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockMCPClientInterface)(nil).IsInitialized))
}
