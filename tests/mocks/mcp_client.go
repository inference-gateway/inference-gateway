// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=../tests/mocks/mcp_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMCPClientInterface is a mock of MCPClientInterface interface.
type MockMCPClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMCPClientInterfaceMockRecorder
	isgomock struct{}
}

// MockMCPClientInterfaceMockRecorder is the mock recorder for MockMCPClientInterface.
type MockMCPClientInterfaceMockRecorder struct {
	mock *MockMCPClientInterface
}

// NewMockMCPClientInterface creates a new mock instance.
func NewMockMCPClientInterface(ctrl *gomock.Controller) *MockMCPClientInterface {
	mock := &MockMCPClientInterface{ctrl: ctrl}
	mock.recorder = &MockMCPClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMCPClientInterface) EXPECT() *MockMCPClientInterfaceMockRecorder {
	return m.recorder
}

// DiscoverCapabilities mocks base method.
func (m *MockMCPClientInterface) DiscoverCapabilities(ctx context.Context) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverCapabilities", ctx)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverCapabilities indicates an expected call of DiscoverCapabilities.
func (mr *MockMCPClientInterfaceMockRecorder) DiscoverCapabilities(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverCapabilities", reflect.TypeOf((*MockMCPClientInterface)(nil).DiscoverCapabilities), ctx)
}

// ExecuteTool mocks base method.
func (m *MockMCPClientInterface) ExecuteTool(ctx context.Context, toolName string, params any, serverURL string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTool", ctx, toolName, params, serverURL)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTool indicates an expected call of ExecuteTool.
func (mr *MockMCPClientInterfaceMockRecorder) ExecuteTool(ctx, toolName, params, serverURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTool", reflect.TypeOf((*MockMCPClientInterface)(nil).ExecuteTool), ctx, toolName, params, serverURL)
}

// GetServerCapabilities mocks base method.
func (m *MockMCPClientInterface) GetServerCapabilities() map[string]map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerCapabilities")
	ret0, _ := ret[0].(map[string]map[string]any)
	return ret0
}

// GetServerCapabilities indicates an expected call of GetServerCapabilities.
func (mr *MockMCPClientInterfaceMockRecorder) GetServerCapabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerCapabilities", reflect.TypeOf((*MockMCPClientInterface)(nil).GetServerCapabilities))
}

// InitializeAll mocks base method.
func (m *MockMCPClientInterface) InitializeAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeAll indicates an expected call of InitializeAll.
func (mr *MockMCPClientInterfaceMockRecorder) InitializeAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeAll", reflect.TypeOf((*MockMCPClientInterface)(nil).InitializeAll), ctx)
}

// IsInitialized mocks base method.
func (m *MockMCPClientInterface) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized.
func (mr *MockMCPClientInterfaceMockRecorder) IsInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockMCPClientInterface)(nil).IsInitialized))
}

// StreamChatWithTools mocks base method.
func (m *MockMCPClientInterface) StreamChatWithTools(ctx context.Context, messages []map[string]any, serverURL string, callback func(map[string]any) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamChatWithTools", ctx, messages, serverURL, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamChatWithTools indicates an expected call of StreamChatWithTools.
func (mr *MockMCPClientInterfaceMockRecorder) StreamChatWithTools(ctx, messages, serverURL, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamChatWithTools", reflect.TypeOf((*MockMCPClientInterface)(nil).StreamChatWithTools), ctx, messages, serverURL, callback)
}
