// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go
//
// Generated by this command:
//
//	mockgen -source=registry.go -destination=../tests/mocks/provider_registry.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	providers "github.com/inference-gateway/inference-gateway/providers"
	gomock "go.uber.org/mock/gomock"
)

// MockProviderRegistry is a mock of ProviderRegistry interface.
type MockProviderRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockProviderRegistryMockRecorder
	isgomock struct{}
}

// MockProviderRegistryMockRecorder is the mock recorder for MockProviderRegistry.
type MockProviderRegistryMockRecorder struct {
	mock *MockProviderRegistry
}

// NewMockProviderRegistry creates a new mock instance.
func NewMockProviderRegistry(ctrl *gomock.Controller) *MockProviderRegistry {
	mock := &MockProviderRegistry{ctrl: ctrl}
	mock.recorder = &MockProviderRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderRegistry) EXPECT() *MockProviderRegistryMockRecorder {
	return m.recorder
}

// BuildProvider mocks base method.
func (m *MockProviderRegistry) BuildProvider(providerID providers.Provider, client providers.Client) (providers.IProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildProvider", providerID, client)
	ret0, _ := ret[0].(providers.IProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildProvider indicates an expected call of BuildProvider.
func (mr *MockProviderRegistryMockRecorder) BuildProvider(providerID, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildProvider", reflect.TypeOf((*MockProviderRegistry)(nil).BuildProvider), providerID, client)
}

// GetProviders mocks base method.
func (m *MockProviderRegistry) GetProviders() map[providers.Provider]*providers.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviders")
	ret0, _ := ret[0].(map[providers.Provider]*providers.Config)
	return ret0
}

// GetProviders indicates an expected call of GetProviders.
func (mr *MockProviderRegistryMockRecorder) GetProviders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviders", reflect.TypeOf((*MockProviderRegistry)(nil).GetProviders))
}
