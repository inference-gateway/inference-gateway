// Code generated by MockGen. DO NOT EDIT.
// Source: management.go
//
// Generated by this command:
//
//	mockgen -source=management.go -destination=../tests/mocks/provider.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	providers "github.com/inference-gateway/inference-gateway/providers"
	gomock "go.uber.org/mock/gomock"
)

// MockIProvider is a mock of IProvider interface.
type MockIProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIProviderMockRecorder
	isgomock struct{}
}

// MockIProviderMockRecorder is the mock recorder for MockIProvider.
type MockIProviderMockRecorder struct {
	mock *MockIProvider
}

// NewMockIProvider creates a new mock instance.
func NewMockIProvider(ctrl *gomock.Controller) *MockIProvider {
	mock := &MockIProvider{ctrl: ctrl}
	mock.recorder = &MockIProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProvider) EXPECT() *MockIProviderMockRecorder {
	return m.recorder
}

// ChatCompletions mocks base method.
func (m *MockIProvider) ChatCompletions(ctx context.Context, clientReq providers.CreateChatCompletionRequest) (providers.CreateChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatCompletions", ctx, clientReq)
	ret0, _ := ret[0].(providers.CreateChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatCompletions indicates an expected call of ChatCompletions.
func (mr *MockIProviderMockRecorder) ChatCompletions(ctx, clientReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatCompletions", reflect.TypeOf((*MockIProvider)(nil).ChatCompletions), ctx, clientReq)
}

// GetAuthType mocks base method.
func (m *MockIProvider) GetAuthType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthType indicates an expected call of GetAuthType.
func (mr *MockIProviderMockRecorder) GetAuthType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthType", reflect.TypeOf((*MockIProvider)(nil).GetAuthType))
}

// GetExtraHeaders mocks base method.
func (m *MockIProvider) GetExtraHeaders() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtraHeaders")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// GetExtraHeaders indicates an expected call of GetExtraHeaders.
func (mr *MockIProviderMockRecorder) GetExtraHeaders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtraHeaders", reflect.TypeOf((*MockIProvider)(nil).GetExtraHeaders))
}

// GetID mocks base method.
func (m *MockIProvider) GetID() *providers.Provider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(*providers.Provider)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockIProviderMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockIProvider)(nil).GetID))
}

// GetName mocks base method.
func (m *MockIProvider) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIProviderMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIProvider)(nil).GetName))
}

// GetToken mocks base method.
func (m *MockIProvider) GetToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetToken indicates an expected call of GetToken.
func (mr *MockIProviderMockRecorder) GetToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockIProvider)(nil).GetToken))
}

// GetURL mocks base method.
func (m *MockIProvider) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL.
func (mr *MockIProviderMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockIProvider)(nil).GetURL))
}

// ListModels mocks base method.
func (m *MockIProvider) ListModels(ctx context.Context) (providers.ListModelsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", ctx)
	ret0, _ := ret[0].(providers.ListModelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockIProviderMockRecorder) ListModels(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockIProvider)(nil).ListModels), ctx)
}

// StreamChatCompletions mocks base method.
func (m *MockIProvider) StreamChatCompletions(ctx context.Context, clientReq providers.CreateChatCompletionRequest) (<-chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamChatCompletions", ctx, clientReq)
	ret0, _ := ret[0].(<-chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamChatCompletions indicates an expected call of StreamChatCompletions.
func (mr *MockIProviderMockRecorder) StreamChatCompletions(ctx, clientReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamChatCompletions", reflect.TypeOf((*MockIProvider)(nil).StreamChatCompletions), ctx, clientReq)
}
