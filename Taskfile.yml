---
version: '3'

tasks:
  default:
    desc: 'Show available tasks'
    cmds:
      - task --list

  mcp:schema:download:
    desc: 'Download the latest MCP schema'
    cmds:
      - curl -o mcp/mcp-schema.json https://raw.githubusercontent.com/inference-gateway/schemas/refs/heads/main/mcp/mcp-schema.json
      - curl -o mcp/mcp-schema.yaml https://raw.githubusercontent.com/inference-gateway/schemas/refs/heads/main/mcp/mcp-schema.yaml

  a2a:schema:download:
    desc: 'Download the latest A2A schema'
    cmds:
      - curl -o a2a/a2a-schema.json https://raw.githubusercontent.com/inference-gateway/schemas/refs/heads/main/a2a/a2a-schema.json
      - curl -o a2a/a2a-schema.yaml https://raw.githubusercontent.com/inference-gateway/schemas/refs/heads/main/a2a/a2a-schema.yaml

  install:generator:
    desc: 'Install the generator tool'
    cmds:
      - go install github.com/inference-gateway/tools/cmd/generator@v0.1.1

  generate:
    desc: 'Generate the gateway from OpenAPI Spec'
    deps:
      - install:generator
    cmds:
      - go run cmd/generate/main.go -type ProvidersClientConfig -output providers/client.go
      # TODO - migrate to an existing tool that generate the types from OpenAPI spec schemas
      # - go run github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest --package=providers --generate types -o providers/common_types.go openapi.yaml
      - go run cmd/generate/main.go -type ProvidersCommonTypes -output providers/common_types.go
      - go run cmd/generate/main.go -type Providers -output providers
      - go run cmd/generate/main.go -type ProviderRegistry -output providers/registry.go
      - go run cmd/generate/main.go -type Config -output config/config.go
      - go run cmd/generate/main.go -type MD -output Configurations.md
      - go run cmd/generate/main.go -type HelmSecret -output charts/inference-gateway/templates/secrets-defaults.yaml
      - go run cmd/generate/main.go -type HelmConfigMap -output charts/inference-gateway/templates/configmap-defaults.yaml
      - go run cmd/generate/main.go -type HelmValues -output charts/inference-gateway/values.yaml
      - go run cmd/generate/main.go -type Env -output examples/docker-compose/basic/.env.example
      - go run cmd/generate/main.go -type Env -output examples/docker-compose/hybrid/.env.example
      - go run cmd/generate/main.go -type Env -output examples/docker-compose/tools/.env.example
      - go run cmd/generate/main.go -type Env -output examples/docker-compose/ui/.env.backend.example
      - go run cmd/generate/main.go -type Env -output examples/docker-compose/authentication/.env.example
      - go run cmd/generate/main.go -type Env -output examples/docker-compose/mcp/.env.example
      - go run cmd/generate/main.go -type Env -output examples/docker-compose/a2a/.env.example
      - go run cmd/generate/main.go -type Env -output examples/docker-compose/monitoring/.env.example
      - generator -generator jsonrpc -package a2a a2a/a2a-schema.yaml a2a/generated_types.go
      - generator -generator jsonrpc -package mcp mcp/mcp-schema.yaml mcp/generated_types.go
      - go generate ./providers/... ./api/... ./otel/... ./logger/...  ./mcp/... ./a2a/...
      - task: format
      - echo "✅ Codegen completed successfully!"

  tidy:
    desc: 'Tidy the gateway'
    cmds:
      - find . -name 'go.mod' -execdir go mod tidy \;

  build:
    desc: 'Build the gateway'
    cmds:
      - go build -o bin/inference-gateway cmd/gateway/main.go

  build:container:
    desc: 'Build the gateway container'
    cmds:
      - docker build -t inference-gateway .

  run:
    desc: 'Run the gateway'
    cmds:
      - go run cmd/gateway/main.go

  format:
    desc: 'Format the code'
    cmds:
      - prettier --write .
      - go fmt ./...

  lint:
    desc: 'Run Go static analysis and linting'
    cmds:
      - golangci-lint run

  openapi:lint:
    desc: 'Lint OpenAPI spec'
    cmds:
      - spectral lint --verbose openapi.yaml

  openapi:download:
    desc: 'Download the latest OpenAPI Spec'
    cmds:
      - curl -o openapi.yaml https://raw.githubusercontent.com/inference-gateway/schemas/refs/heads/main/openapi.yaml

  test:
    desc: 'Run tests'
    cmds:
      - go test -v ./...

  benchmark:
    desc: 'Run benchmarks'
    cmds:
      - go test -bench=. -run=^$ -benchmem -benchtime=100x -count=20 ./tests/...

  pre-commit:install:
    desc: 'Install pre-commit hooks'
    cmds:
      - echo "Installing pre-commit checks..."
      - ln -sf ../../scripts/pre-commit-check.sh .git/hooks/pre-commit
      - chmod +x .git/hooks/pre-commit
      - echo "✅ Pre-commit hook installed successfully!"

  pre-commit:uninstall:
    desc: 'Uninstall pre-commit hooks'
    cmds:
      - rm -f .git/hooks/pre-commit
      - echo "✅ Pre-commit hook uninstalled successfully!"

  package:
    desc: 'Package the gateway'
    cmds:
      - docker build -t inference-gateway .

  release-dry-run:
    desc: 'Run a dry-run of both semantic-release and goreleaser'
    cmds:
      - echo "Running semantic-release dry run..."
      - semantic-release --dry-run
      - echo "Running goreleaser dry run..."
      - goreleaser release --config .goreleaser.yaml --clean --snapshot --verbose
