---
name: Artifacts

on:
  release:
    types:
      - published
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write

jobs:
  upload_artifacts:
    name: Upload Artifacts
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/create-github-app-token@v1.12.0
        id: app-token
        with:
          app-id: ${{ secrets.BOT_GH_APP_ID }}
          private-key: ${{ secrets.BOT_GH_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: |
            inference-gateway

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Set up Git
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
          git config --global commit.gpgsign false
          git config --global commit.signoff true

      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          persist-credentials: false
          token: ${{ steps.app-token.outputs.token }}

      - name: Set up Go
        uses: actions/setup-go@v5.3.0
        with:
          go-version: "1.23"
          cache: true

      - name: Install GoReleaser
        run: |
          curl -sSL https://github.com/goreleaser/goreleaser/releases/download/v2.7.0/goreleaser_Linux_x86_64.tar.gz | tar -xzv -C /usr/local/bin goreleaser

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]
          password: ${{ steps.app-token.outputs.token }}

      - name: Run GoReleaser
        run: |
          goreleaser release --clean --skip=announce,publish

      - name: Upload Artifacts to Release
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          # Find all archives created by GoReleaser
          for file in dist/inference-gateway_*; do
            # Skip directories
            if [ -d "$file" ]; then
              echo "Skipping directory: $file"
              continue
            fi
            
            echo "Uploading $file to release ${{ env.VERSION }}"
            gh release upload ${{ env.VERSION }} "$file" --clobber
          done

          # Upload checksums file if it exists
          if [ -f "dist/checksums.txt" ]; then
            gh release upload ${{ env.VERSION }} "dist/checksums.txt" --clobber
          fi

      - name: Push container images
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          docker push ghcr.io/${{ github.repository }}:${{ env.VERSION }}
          if [[ ! "${{ env.VERSION }}" =~ -rc ]]; then
            docker push ghcr.io/${{ github.repository }}:latest
          fi

  scan_containers:
    name: Scan Container Images
    needs:
      - upload_artifacts
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/create-github-app-token@v1.12.0
        id: app-token
        with:
          app-id: ${{ secrets.BOT_GH_APP_ID }}
          private-key: ${{ secrets.BOT_GH_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: |
            inference-gateway

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Set up Git
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
          git config --global commit.gpgsign false
          git config --global commit.signoff true

      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.ref }}
          persist-credentials: false
          token: ${{ steps.app-token.outputs.token }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]
          password: ${{ steps.app-token.outputs.token }}

      - name: Run Vulnerability Scanning
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: "ghcr.io/${{ github.repository }}:${{ github.event.release.tag_name }}"
          exit-code: "0"
          format: "sarif"
          output: "trivy-results.sarif"
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: trivy

  sign_containers:
    name: Sign Container Images
    runs-on: ubuntu-24.04
    needs:
      - scan_containers
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/create-github-app-token@v1.12.0
        id: app-token
        with:
          app-id: ${{ secrets.BOT_GH_APP_ID }}
          private-key: ${{ secrets.BOT_GH_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: |
            inference-gateway

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Set up Git
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
          git config --global commit.gpgsign false
          git config --global commit.signoff true

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.8.1
        with:
          cosign-release: "v2.4.3"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]
          password: ${{ steps.app-token.outputs.token }}

      - name: Extract metadata from previous job
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=raw,value=latest,enable=${{ !contains(github.ref, '-rc') }}

      - name: Sign container image
        run: |
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '); do
            cosign sign --yes $tag
          done

  publish_helm_chart:
    name: Publish Helm Chart
    runs-on: ubuntu-24.04
    env:
      VERSION: ${{ github.event.release.tag_name }}
    steps:
      - uses: actions/create-github-app-token@v1.12.0
        id: app-token
        with:
          app-id: ${{ secrets.BOT_GH_APP_ID }}
          private-key: ${{ secrets.BOT_GH_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: |
            inference-gateway

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Set up Git
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
          git config --global commit.gpgsign false
          git config --global commit.signoff true

      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
          persist-credentials: false
          token: ${{ steps.app-token.outputs.token }}

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: v3.14.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]
          password: ${{ steps.app-token.outputs.token }}

      - name: Package and Push Helm chart
        run: |
          cd charts/inference-gateway
          helm dependency update
          helm package . --version ${{ env.VERSION }} --app-version ${{ env.VERSION }}
          helm push inference-gateway-${{ env.VERSION }}.tgz oci://ghcr.io/${{ github.repository }}/charts
