---
name: Release

on:
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  packages: write
  issues: write
  pull-requests: write
  security-events: write

jobs:
  github_release:
    name: Github Release
    runs-on: ubuntu-24.04
    outputs:
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4.2.0
        with:
          node-version: "22"

      - name: Configure Git signing
        run: |
          echo "${{ secrets.BOT_GPG_PRIVATE_KEY }}" | gpg --import
          git config --global user.signingkey ${{ secrets.BOT_GPG_KEY_ID }}
          git config --global commit.gpgsign true
          git config --global commit.signoff true
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email ${{ vars.BOT_EMAIL }}

      - name: Install semantic release and plugins
        run: |
          npm install -g semantic-release@v24.2.3 \
            conventional-changelog-cli \
            conventional-changelog-conventionalcommits \
            @semantic-release/changelog \
            @semantic-release/exec \
            @semantic-release/git \
            @semantic-release/github

      - name: Create a release if needed
        id: semantic
        env:
          CI: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: "GitHub Actions Bot"
          GIT_AUTHOR_EMAIL: ${{ vars.BOT_EMAIL }}
          GIT_COMMITTER_NAME: "GitHub Actions Bot"
          GIT_COMMITTER_EMAIL: ${{ vars.BOT_EMAIL }}
        run: |
          # Create first release if not exists using gh cli - Initial Release Version 0.1.0
          # This is an HACK because semantic release doesn't support versions under 1.0.0
          # But if we already have a release then it respects it and start to increment from there
          if ! gh release view v0.1.0 >/dev/null 2>&1; then
            gh release create v0.1.0 --title "Initial Release" --notes "Initial Release" --target main
          fi

          # Run semantic-release in dry-run first to capture version
          DRY_OUTPUT=$(semantic-release --dry-run 2>&1 || true)

          # Check if there are no changes
          if $(echo "$DRY_OUTPUT" | grep -q "no new version is released"); then
            echo "No new release needed"
            echo "new_release_published=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Extract version from dry run output
          VERSION=$(echo "$DRY_OUTPUT" | grep -o "The next release version is [0-9]\+\.[0-9]\+\.[0-9]\+\(-rc\.[0-9]\+\)\?" | cut -d ' ' -f6)
          if [ -z "$VERSION" ]; then
            echo "Error: Could not determine version"
            echo "Output: $DRY_OUTPUT"
            exit 1
          fi

          echo "new_release_version=$VERSION" >> $GITHUB_OUTPUT

          # Run actual release
          if semantic-release; then
            echo "Successfully released version $VERSION"
            echo "new_release_published=true" >> $GITHUB_OUTPUT
          else
            echo "Release failed"
            exit 1
          fi

  upload_artifacts:
    name: Upload Artifacts
    runs-on: ubuntu-24.04
    needs:
      - github_release
    if: needs.github_release.outputs.new_release_published == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@v5.3.0
        with:
          go-version: "1.23"
          cache: true

      - name: Install GoReleaser
        run: |
          curl -sSL https://github.com/goreleaser/goreleaser/releases/download/v2.7.0/goreleaser_Linux_x86_64.tar.gz | tar -xzv -C /usr/local/bin goreleaser

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          goreleaser release --clean --skip=announce,publish

      - name: Upload Artifacts to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.github_release.outputs.new_release_version }}
        run: |
          # Find all archives created by GoReleaser
          for file in dist/inference-gateway_*; do
            # Skip directories
            if [ -d "$file" ]; then
              echo "Skipping directory: $file"
              continue
            fi
            
            echo "Uploading $file to release v${VERSION}"
            gh release upload v${VERSION} "$file" --clobber
          done

          # Upload checksums file if it exists
          if [ -f "dist/checksums.txt" ]; then
            gh release upload v${VERSION} "dist/checksums.txt" --clobber
          fi

      - name: Push container images
        run: |
          docker push ghcr.io/${{ github.repository }}:v${{ needs.github_release.outputs.new_release_version }}
          if [[ ! "${{ needs.github_release.outputs.new_release_version }}" =~ -rc ]]; then
            docker push ghcr.io/${{ github.repository }}:latest
          fi

  scan_containers:
    name: Scan Container Images
    needs:
      - github_release
      - upload_artifacts
    if: needs.github_release.outputs.new_release_published == 'true'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.ref }}
          persist-credentials: false

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Vulnerability Scanning
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: "ghcr.io/${{ github.repository }}:v${{ needs.github_release.outputs.new_release_version }}"
          exit-code: "0"
          format: "sarif"
          output: "trivy-results.sarif"
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: trivy

  sign_containers:
    name: Sign Container Images
    needs:
      - github_release
      - upload_artifacts
    if: needs.github_release.outputs.new_release_published == 'true'
    runs-on: ubuntu-24.04
    env:
      CONTAINER_REGISTRY: ghcr.io
      VERSION: ${{ needs.github_release.outputs.new_release_version }}
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.8.1
        with:
          cosign-release: "v2.4.3"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign container images
        run: |
          docker pull ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}:v${{ env.VERSION }}
          VERSION_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}:v${{ env.VERSION }})
          cosign sign --yes $VERSION_DIGEST

          if [[ ! "${{ needs.github_release.outputs.new_release_version }}" =~ -rc ]]; then
            docker pull ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}:latest
            LATEST_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}:latest)
            cosign sign --yes $LATEST_DIGEST
          fi
